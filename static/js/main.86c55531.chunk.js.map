{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","about","Alert","alert","msg","word","lower","charAt","slice","capitalize","App","setMode","setalert","message","setTimeout","tittle","document","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.86c55531.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link mx-3\" href=\"/about\">{props.about}</a>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='light'?\"Enable dark mode\":\"Enable light mode\"}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav> \r\n    )\r\n}\r\n\r\n//PropTypes\r\n//Syntax: FunctionName.proptypes = {propName: PropTypes.datatype}\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,//isRequired makes compulsory to give title. Else it shows title is indefined in console and gives error.(If default prop is not given)\r\n                    about: PropTypes.string}\r\n\r\n//Default Props\r\n//When props are not passed these default props show up.\r\nNavbar.defaultProps = {\r\n    title: \"TextUtils\",\r\n    about: \"About\"\r\n}","import React,  {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"Success\");\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"Success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        let newText = ' ';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\", \"Success\");\r\n    }\r\n\r\n   \r\n\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"On Change\");\r\n        setText(event.target.value)//It will allow to user in type the text box. i.e-It allows to change the valueof text.\r\n        \r\n    }\r\n\r\n    const [text, setText] = useState('Enter text here');\r\n    // setText(\"this is updated Text\")\r\n    //setText is used to change/update text in usestate\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}} >\r\n                <div className=\"mb-3 my-4\">\r\n                    <h1>{props.heading}</h1>\r\n                    <textarea className=\"form-control my-2\" value ={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#dee2e6':'white', color: props.mode==='dark'?'dark':'dark'}} id=\"mybox\"  rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-dark\" onClick={handleUpClick}>Convert to upper-case</button>\r\n                <button className=\"btn btn-dark mx-3\" onClick={handleLowClick}>Convert to lower-case</button>\r\n                <button className=\"btn btn-dark\" onClick={handleClearClick}>Clear Text</button>\r\n                {/* <button className=\"btn btn-dark\" id=\"my Box\" onClick={handleCopy}>Copy Text</button> */}\r\n        </div>\r\n\r\n        <div className=\"container my-4\" >\r\n            <h2 style={{color: props.mode==='dark'?'white':'black'}} >Your text summary</h2>\r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>Time required to read: {0.008 * text.split(\" \").length} minutes</p> \r\n            <h3 style={{color: props.mode==='dark'?'white':'black'}} >Preview</h3>\r\n            <p>{text.length>0?text:\"Enter Something to preview it here\"}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize= (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<div className={`alert alert-${props.alert.msg} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n// let name = \"Vaish\";\nfunction App() {\n  const[mode, setMode] = useState('dark');\n      {/* Whether darkmode is enable or not */}\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setalert({\n      msg: message,\n      type: type \n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.background='#6c757d';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title=\"TextUtils | DarkMode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.background='white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title=\"TextUtils | LightMode\";\n    }\n  }\n  return (\n    <>\n    {/* <Router>  */}\n      {/* <Navbar title = \"TextUtils\" about = \"About TextUtils\"/> */}\n      <Navbar tittle=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container\">\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\"/>\n        {/* <Route exact path=\"/\" element={<TextForm/>} /> */}\n        {/* <Route exact path=\"/about\" element={<About/>} />  */}\n      {/* </Routes> */}\n      </div>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}